//*******************************
//console.logger.js 1.1.6
// Gil Machado aka FBladePT 2017
//https://github.com/FBlade/console.logger.js
//*******************************
!function (e) { "use strict"; function n(e) { t.setLevel(e && e.defaultLevel || t.DEBUG), t.setHandler(t.createDefaultHandler(e)) } var t = {}; t.AUTHOR = "Gil Machado", t.VERSION = "1.1.6"; var o, i = {}, r = function (e, n) { return { value: e, name: n } }, l = function () { var e, n, t = arguments, o = t[0]; for (n = 1; n < t.length; n++) for (e in t[n]) e in o || !t[n].hasOwnProperty(e) || (o[e] = t[n][e]); return o }, f = function (e, n) { return function () { return n.apply(e, arguments) } }; t.DEBUG = r(1, "DEBUG"), t.INFO = r(2, "INFO"), t.TIME = r(3, "TIME"), t.WARN = r(4, "WARN"), t.ERROR = r(8, "ERROR"), t.OFF = r(99, "OFF"); var c = function (e) { this.context = e, this.setLevel(e.filterLevel), this.log = this.info }; c.prototype = { setLevel: function (e) { e && "value" in e && (this.context.filterLevel = e) }, getLevel: function () { return this.context.filterLevel }, enabledFor: function (e) { var n = this.context.filterLevel; return e.value >= n.value }, debug: function () { this.invoke(t.DEBUG, arguments) }, info: function () { this.invoke(t.INFO, arguments) }, warn: function () { this.invoke(t.WARN, arguments) }, error: function () { this.invoke(t.ERROR, arguments) }, time: function (e) { "string" == typeof e && e.length > 0 && this.invoke(t.TIME, [e, "start"]) }, timeEnd: function (e) { "string" == typeof e && e.length > 0 && this.invoke(t.TIME, [e, "end"]) }, invoke: function (e, n) { o && this.enabledFor(e) && o(n, l({ level: e }, this.context)) } }; var s = new c({ filterLevel: t.OFF }); !function () { var e = t; e.enabledFor = f(s, s.enabledFor), e.debug = f(s, s.debug), e.time = f(s, s.time), e.timeEnd = f(s, s.timeEnd), e.info = f(s, s.info), e.warn = f(s, s.warn), e.error = f(s, s.error), e.log = e.info }(), t.setHandler = function (e) { o = e }, t.setLevel = function (e) { s.setLevel(e); for (var n in i) i.hasOwnProperty(n) && i[n].setLevel(e) }, t.getLevel = function () { return s.getLevel() }, t.get = function (e) { return i[e] || (i[e] = new c(l({ name: e }, s.context))) }, t.createDefaultHandler = function (e) { (e = e || {}).formatter = e.formatter || function (e, n) { n.name && e.unshift("[" + n.name + "]") }; var n = {}, o = function (e, n) { Function.prototype.apply.call(e, console, n) }; return "undefined" == typeof console ? function () { } : function (i, r) { i = Array.prototype.slice.call(i); var l, f = console.log; r.level === t.TIME ? (l = (r.name ? "[" + r.name + "] " : "") + i[0], "start" === i[1] ? console.time ? console.time(l) : n[l] = (new Date).getTime() : console.timeEnd ? console.timeEnd(l) : o(f, [l + ": " + ((new Date).getTime() - n[l]) + "ms"])) : (r.level === t.WARN && console.warn ? f = console.warn : r.level === t.ERROR && console.error ? f = console.error : r.level === t.INFO && console.info ? f = console.info : r.level === t.DEBUG && console.debug && (f = console.debug), e.formatter(i, r), o(f, i)) } }, t.init = function (e) { var t = !0; void 0 != e && e.disabled && (t = !1), t ? n(e) : console.log("jsLog Disabled") }, "function" == typeof define && define.amd ? define(t) : "undefined" != typeof module && module.exports ? module.exports = t : (t._prevjsLog = e.jsLog, t.noConflict = function () { return e.jsLog = t._prevjsLog, t }, e.jsLog = t) }(this);